{
    "sections": [
        {
            "title": "Simple Data Types Conversion",
            "function": "def factorial(n: int) -> int:",
            "cases": [
                [
                    "5",
                    "120"
                ],
                [
                    "0",
                    "1"
                ],
                [
                    "7",
                    "5040"
                ]
            ]
        },
        {
            "title": "Complex Data Structures",
            "function": "def first_non_repeated(s: str) -> str:",
            "cases": [
                [
                    "aabbccdde",
                    "e"
                ],
                [
                    "aabbcc",
                    "0"
                ],
                [
                    "abcd",
                    "a"
                ]
            ]
        },
        {
            "title": "Object-Oriented Paradigm",
            "function": "class BankAccount:",
            "cases": [
                [
                    "Initialize with balance: 100.0, Deposit: 50.0",
                    "Expected Balance: 150.0"
                ],
                [
                    "Initialize with balance: 100.0, Withdraw: 110.0",
                    "Expected Result: False"
                ],
                [
                    "Initialize with balance: 100.0, Withdraw: 90.0",
                    "Expected Balance: 10.0"
                ]
            ]
        },
        {
            "title": "Recursive Functions",
            "function": "def fibonacci(n: int) -> int:",
            "cases": [
                [
                    "5",
                    "5"
                ],
                [
                    "7",
                    "13"
                ],
                [
                    "10",
                    "55"
                ]
            ]
        },
        {
            "title": "Functions with Varied Parameters",
            "function": "def find_max(*numbers: int) -> int:",
            "cases": [
                [
                    "5, 10, 15",
                    "15"
                ],
                [
                    "1, 3, 2, 4",
                    "4"
                ],
                [
                    "12",
                    "12"
                ]
            ]
        },
        {
            "title": "Exception Handling",
            "function": "def read_file(filename: str) -> str:",
            "cases": [
                [
                    "\"existent_file.txt\"",
                    "File content"
                ],
                [
                    "\"nonexistent_file.txt\"",
                    "'File not found!'"
                ]
            ]
        },
        {
            "title": "Multithreading and Concurrency",
            "function": "class Counter:",
            "cases": [
                [
                    "Call increment() 5 times",
                    "5"
                ],
                [
                    "Call increment() 10 times",
                    "10"
                ]
            ]
        },
        {
            "title": "Python Libraries and Dependencies",
            "function": "def parse_date(date_str: str):",
            "cases": [
                [
                    "\"12/05/2020\"",
                    "datetime object for 12th May 2020"
                ],
                [
                    "\"invalid_date\"",
                    "None"
                ]
            ]
        },
        {
            "title": "Whole Project Conversion",
            "function": "class Book and class Library:",
            "cases": [
                [
                    "Add book with title \"Sample Book\" and author \"John Doe\" to the library",
                    "When retrieving, the list should contain this book."
                ]
            ]
        },
        {
            "title": "Functional Paradigm",
            "function": "def filter_and_square(numbers: List[int]) -> List[int]:",
            "cases": [
                [
                    "[1, 2, 3, 4, 5]",
                    "[4, 16]"
                ],
                [
                    "[6, 7, 8, 9, 10]",
                    "[36, 64, 100]"
                ]
            ]
        }
    ]
}